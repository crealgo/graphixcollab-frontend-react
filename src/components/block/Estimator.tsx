import { ArrowForward, CheckCircleOutline, Restore } from '@mui/icons-material';
import { styled } from '@mui/material';
import { type FC, type FormEventHandler } from 'react';
import { type Action } from '../../types/general';
import { ActionStack } from '../base/ActionStack';
import { Button } from '../base/Button';
import { Heading } from '../base/Heading';
import { Mark } from '../base/Mark';
import { FormControl } from '../form/FormControl';
import { Input } from '../form/Input';
import { Select } from '../form/Select';
// import styled from '@emotion/styled'

export type EstimatorProps = {
	actions?: Action[];
};

const ContentGrid = styled('div')`
	--content-grid-padding-block-end: 50%;
	--action-stack-spacing: 1rem;

	@media screen and (min-width: 425px) {
		--content-grid-padding-block-end: 52%;
	}

	@media screen and (min-width: 768px) {
		--content-grid-padding-block-end: 6.5rem;
	}

	@media screen and (min-width: 911px) {
		--content-grid-padding-block-end: 5rem;
	}

	@media screen and (min-width: 1024px) {
		--content-grid-padding-block-end: 3rem;
	}

	display: grid;
	/* gap: 2rem; */
	max-width: 900px;
	z-index: 1;

	padding-block-end: var(--content-grid-padding-block-end);

	.ActionStack-root {
		margin-top: var(--action-stack-spacing);
	}
`;

const materials = [
	{
		label: 'T-shirt',
		value: 't-shirt'
	},
	{
		label: 'Hoodie',
		value: 'hoodie'
	},
	{
		label: 'Sash',
		value: 'sash'
	},
	{
		label: 'Poster',
		value: 'poster'
	},
	{
		label: 'Sticker',
		value: 'sticker'
	}
];

const services = [
	{
		label: 'Embroider',
		value: 'embroider'
	},
	{
		label: 'Print',
		value: 'print'
	}
];

const serviceContent = [
	{
		label: 'An image',
		value: 'image'
	},
	{
		label: 'My name',
		value: 'name'
	},
	{
		label: 'My initials',
		value: 'initials'
	},
	{
		label: 'A quote',
		value: 'quote'
	}
];

const Instructions = styled('em')`
	display: block;
	margin-block-start: var(--spacing-2);
	padding-block-start: var(--spacing-2);
	margin-block-end: var(--spacing-10);
	border-block-start: solid 2px var(--color-brand-magenta-lighter);
`;

const FieldGrid = styled('div')`
	display: grid;
	max-width: 50rem;
	place-items: start;
	gap: 1rem;
	grid-template-columns: 1fr;

	margin-bottom: 3rem;

	@media screen and (min-width: 768px) {
		grid-template-columns: repeat(6, minmax(0, 1fr));

		* {
			grid-column: span 2;
		}

		*:nth-of-type(1) {
			grid-column: span 3;
		}

		*:nth-of-type(2) {
			grid-column: span 3;
		}
	}
`;

const sharedControlProps = {
	controlSize: 'large',
	isFullWidth: true
} as const;

export const Estimator: FC<EstimatorProps> = () => {
	const handleSubmit: FormEventHandler<HTMLFormElement> = event => {
		event.preventDefault();

		const formData = new FormData(event.currentTarget);

		/*
			EXAMPLE
			content-type-input: "name"
			deadline-input: "2023-06-15"
			email-input: "test@email.com"
			material-type-input: "sash"
			name-input: "test name"
			quantity-input: "10"
			service-type-input: "embroider"
		*/

		const mailTo = 'hello.crealgo@gmail.com';

		const contentType =
			formData.get('content-type-input')?.toString() ?? '';
		const deadline = formData.get('deadline-input')?.toString() ?? '';
		const email = formData.get('email-input')?.toString() ?? '';
		const materialType =
			formData.get('material-type-input')?.toString() ?? '';
		const name = formData.get('name-input')?.toString() ?? '';
		const quantity = formData.get('quantity-input')?.toString() ?? '';
		const serviceType =
			formData.get('service-type-input')?.toString() ?? '';

		const subject = encodeURIComponent(
			`Estimate Request request for a ${materialType}`
		);
		const body = encodeURIComponent(`Hi, I'm ${name}!
I'd like to get an estimate for a ${serviceType}. Here are my details:

Customer Info
Customer Name: ${name}
Customer Email: ${email}
Content Type: ${contentType}
By Deadline: ${deadline}
Material Type: ${materialType}
Quantity: ${quantity}
Service Type: ${serviceType}

Attach your image or artwork below:
///// Replace with Image or Artwork üñºÔ∏è /////

Thanks,
${name}

Generated by the ü§ñ Crealgo Bot`);

		location.href = `mailto:${mailTo}?subject=${subject}&body=${body}`;
	};

	const today = new Date().toISOString().split('T')[0];

	return (
		<form id="estimator-form" onSubmit={handleSubmit}>
			<ContentGrid>
				<Heading level={2}>
					Get a quick{' '}
					<Mark text color="magenta">
						estimate
					</Mark>
					!
				</Heading>
				<Instructions>
					Change the options below to what you‚Äôre looking for.
				</Instructions>
				<FieldGrid>
					<FormControl
						required
						label="Name"
						id="name"
						{...sharedControlProps}
					>
						<Input placeholder="John Snow" type="text" />
					</FormControl>
					<FormControl
						required
						label="Email"
						id="email"
						helperText="The estimate will be sent here."
						{...sharedControlProps}
					>
						<Input placeholder="johnsnow@aol.com" type="email" />
					</FormControl>
					<FormControl
						label="Material Type"
						helperText="The type of material to print on"
						id="material-type"
						{...sharedControlProps}
					>
						<Select options={materials} />
					</FormControl>
					<FormControl
						label="Service Type"
						id="service-type"
						{...sharedControlProps}
					>
						<Select options={services} />
					</FormControl>
					<FormControl
						label="Content Type"
						id="content-type"
						helperText="What you want printed on the material."
						{...sharedControlProps}
					>
						<Select options={serviceContent} />
					</FormControl>
					<FormControl
						label="Quantity"
						id="quantity"
						helperText="How many you want printed."
						{...sharedControlProps}
					>
						<Input
							type="number"
							defaultValue={10}
							min={10}
							max={9999}
						/>
					</FormControl>
					<FormControl
						required
						label="Deadline"
						id="deadline"
						helperText="When you need the material by."
						{...sharedControlProps}
					>
						<Input type="date" min={today} />
					</FormControl>
				</FieldGrid>
				<ActionStack>
					<Button
						size="large"
						color="secondary"
						endIcon={<CheckCircleOutline />}
						type="submit"
					>
						Get Estimate
					</Button>
					<Button
						size="large"
						color="tertiary"
						endIcon={<Restore />}
						type="reset"
					>
						Reset
					</Button>
					<Button
						size="large"
						color="text"
						endIcon={<ArrowForward />}
					>
						Contact Us
					</Button>
				</ActionStack>
			</ContentGrid>
		</form>
	);
};
